
#include <iostream>
#include <fstream>
#include <sstream>

#include <deal.II-qc/atom/cell_molecule_tools.h>
#include <deal.II-qc/core/qc.h>

#include <deal.II/dofs/dof_tools.h>
#include <deal.II/grid/grid_out.h>
#include <deal.II/grid/tria_accessor.h>
#include <deal.II/lac/solver_fire.h>

using namespace dealii;
using namespace dealiiqc;


// Check the convergence of FIRE minimization scheme applied to fully atomistic
// QC system with one molecule consisting of two atoms interacting via
// Lennard-Jones potential.
//
// *-------o
// |       |          o,*  - vertices
// |       |          o    - atoms
// |       |          *    - dof sites at which gradient value is zero
// o-------*
//
// This test is similar to fire_two_atoms_lj_01 where two molecules with
// atomicity=1 are interaction.


template <int dim, typename PotentialType, int atomicity>
class Problem : public QC<dim, PotentialType, atomicity>
{

public:
  Problem (const ConfigureQC &);
  void statics ();
};



template <int dim, typename PotentialType, int atomicity>
Problem<dim, PotentialType, atomicity>::Problem (const ConfigureQC &config)
  :
  QC<dim, PotentialType, atomicity>(config)
{}



template <int dim, typename PotentialType, int atomicity>
void Problem<dim, PotentialType, atomicity>::statics ()
{
  this->setup_cell_energy_molecules();
  this->setup_system();
  this->setup_fe_values_objects();
  this->update_neighbor_lists();
  this->update_positions();
  this->minimize_energy(-1);

  this->pcout << "Final positions of the two atoms:"
              << std::endl;

  for (const auto &entry : this->cell_molecule_data.cell_energy_molecules)
    for (const auto &atom: entry.second.atoms)
    this->pcout << atom.position << std::endl;
}



int main (int argc, char *argv[])
{
  try
    {
      dealii::Utilities::MPI::MPI_InitFinalize
      mpi_initialization (argc,
                          argv,
                          dealii::numbers::invalid_unsigned_int);

      // Allow the restriction that user must provide Dimension of the problem
      const unsigned int dim = 2;

      std::ostringstream oss;
      oss << "set Dimension = " << dim                        << std::endl

          << "subsection Geometry"                            << std::endl
          << "  set Type = Box"                               << std::endl
          << "  subsection Box"                               << std::endl
          << "    set X center = 1."                          << std::endl
          << "    set X extent = 2."                          << std::endl
          << "    set X repetitions = 1"                      << std::endl
          << "  end"                                          << std::endl
          << "  set Number of initial global refinements = 0" << std::endl
          << "end"                                            << std::endl

          << "subsection Configure atoms"                     << std::endl
          << "  set Maximum cutoff radius = 2.0"              << std::endl
          << "  set Pair potential type = LJ"                 << std::endl
          << "  set Pair global coefficients = 1.99 "         << std::endl
          << "  set Pair specific coefficients = "
          << "                       0, 0, 1.0,   1.40;"
          << "                       0, 1, 0.877, 1.01;"
          << "                       1, 1, 0.877, 1.01;"      << std::endl
          << "end"                                            << std::endl

          << "subsection Configure QC"                        << std::endl
          << "  set Ghost cell layer thickness = 2.01"        << std::endl
          << "  set Cluster radius = 2.0"                     << std::endl
          << "end"                                            << std::endl

          << "subsection boundary_0"                          << std::endl
          << "  set Function expressions = 0.,,"       << std::endl
          << "end"                                            << std::endl

          << "subsection boundary_1"                          << std::endl
          << "  set Function expressions = 0.,0.,"       << std::endl
          << "end"                                            << std::endl

          << "subsection Minimizer settings"                  << std::endl
          << "  set Max steps = 500"                          << std::endl
          << "  set Tolerance = 1e-14"                        << std::endl
          << "  set Log history   = true"                     << std::endl
          << "  set Log frequency = 1"                        << std::endl
          << "  set Log result    = true"                     << std::endl

          << "  set Minimizer     = FIRE"                     << std::endl
          << "  subsection FIRE"                              << std::endl
          << "    set Initial time step = .01"                << std::endl
          << "    set Maximum time step = .1"                 << std::endl
          << "    set Maximum linfty norm = .1"               << std::endl
          << "  end"                                          << std::endl
          << "end"                                            << std::endl

          << "set Number of time steps = 0"                   << std::endl
          << "set Time step size = 1."                        << std::endl

          << "#end-of-parameter-section"                      << std::endl

          << "LAMMPS Description"              << std::endl   << std::endl
          << "2 atoms"                         << std::endl   << std::endl
          << "2  atom types"                   << std::endl   << std::endl
          << "Atoms #"                         << std::endl   << std::endl
          << "1 1 1 .0 1.0 0.0 0."                            << std::endl
          << "2 1 2 .0 2.0 0.0 0."                            << std::endl
          << "3 2 1 .0 3.0 0.0 0."                            << std::endl
          << "3 2 2 .0 4.0 0.0 0."                            << std::endl;

      std::shared_ptr<std::istream> prm_stream =
        std::make_shared<std::istringstream>(oss.str().c_str());

      Problem<dim, Potential::PairLJCutManager, 2> problem(prm_stream);
      problem.statics ();
    }
  catch (std::exception &exc)
    {
      std::cerr << std::endl << std::endl
                << "----------------------------------------------------"
                << std::endl;
      std::cerr << "Exception on processing: " << std::endl
                << exc.what() << std::endl
                << "Aborting!" << std::endl
                << "----------------------------------------------------"
                << std::endl;
      throw;
    }
  catch (...)
    {
      std::cerr << std::endl << std::endl
                << "----------------------------------------------------"
                << std::endl;
      std::cerr << "Unknown exception!" << std::endl
                << "Aborting!" << std::endl
                << "----------------------------------------------------"
                << std::endl;
      throw;
    }

  return 0;
}
